{"ast":null,"code":"var _jsxFileName = \"/Users/Adam/Documents/physics-site/src/pages/Matcher.js\";\nimport React from 'react';\nimport RightDataPanel from '../components/data-panel/RightDataPanel';\nimport LeftDataPanel from '../components/data-panel/LeftDataPanel';\nimport SplitPane from 'react-split-pane';\nimport { Button } from 'antd';\nimport { modifySpreadsheetDataSingleCell, getSpreadsheetData } from '../util/gapi';\nimport { formatData } from '../util/dataFormatter';\nimport { useRecoilState } from 'recoil';\nimport { rightDataState, leftDataState, applicationState } from '../store/atoms';\nimport LoadingOverlay from 'react-loading-overlay';\nexport default function Matcher() {\n  const [appState, setAppState] = useRecoilState(applicationState);\n  const [{\n    matchColumn: rightMatchColumn,\n    spreadsheetId: rightSpreadsheetId,\n    nameColumn: rightNameColumn,\n    refreshing: rightRefreshing\n  }, setRightData] = useRecoilState(rightDataState);\n  const [{\n    selectedRows: selectedLeftRows,\n    matchColumn: leftMatchColumn,\n    spreadsheetId: leftSpreadsheetId,\n    nameColumn: leftNameColumn,\n    refreshing: leftRefreshing\n  }, setLeftData] = useRecoilState(leftDataState);\n  var windowWidth = window.innerWidth;\n  var defaultPaneSize = Math.round(windowWidth / 2); //Disable matching variables & function\n\n  var matchingEnabled = leftSpreadsheetId && rightSpreadsheetId && rightNameColumn && leftNameColumn && rightMatchColumn && leftMatchColumn;\n\n  function setSidebarOpen(open) {\n    setAppState({ ...appState,\n      sidebarOpen: open\n    });\n  } // This basically refreshes the data in memory, see where this is used.\n\n\n  function onLeftSpreadsheetLoaded(response) {\n    var range = response.result;\n\n    if (range.values.length > 0) {\n      var newDataState = formatData(range.values, true);\n      console.log(newDataState);\n      setLeftData(oldLeftData => {\n        let newState = { ...oldLeftData,\n          // Only updating the state and refreshing\n          // NOTE: If you override the old columns, then you get rid of previous settings\n          data: newDataState.data,\n          // Update selected selected rows with new data\n          selectedRows: oldLeftData.selectedRows.map(row => // Get the updated row from the new state\n          newDataState.data[row.key]),\n          refreshing: false\n        };\n        return newState;\n      });\n    } else {\n      alert('No data found.');\n    }\n  } // This basically refreshes the data in memory, see where this is used.\n\n\n  function onRightSpreadsheetLoaded(response) {\n    var range = response.result;\n\n    if (range.values.length > 0) {\n      var newDataState = formatData(range.values, true);\n      console.log(newDataState);\n      setRightData(oldRightData => {\n        let newState = { ...oldRightData,\n          // Only updating the state and refreshing\n          // NOTE: If you override the old columns, then you get rid of previous settings\n          data: newDataState.data,\n          // Update selected selected rows with new data\n          selectedRows: oldRightData.selectedRows.map(row => // Get the updated row from the new state\n          newDataState.data[row.key]),\n          refreshing: false\n        };\n        console.log(newState);\n        return newState;\n      });\n    } else {\n      alert('No data found.');\n    }\n  } // These functions actually match and unmatch\n\n\n  function writeToGoogleSheets(left, right) {\n    // Stringify both left and right before writing to Google Sheets\n    let leftValueString = JSON.stringify(left.value);\n    let rightValueString = JSON.stringify(right.value); // Save an empty list [] as a blank cell\n\n    if (leftValueString === \"[]\") leftValueString = \"\";\n    if (rightValueString === \"[]\") rightValueString = \"\"; // If the left data is from Google Sheets, write to it\n\n    if (leftSpreadsheetId) {\n      // Set refreshing to be true\n      setLeftData(leftDataState => {\n        return { ...leftDataState,\n          refreshing: true\n        };\n      });\n      modifySpreadsheetDataSingleCell(leftSpreadsheetId, left.columnIndex, left.rowIndex, leftValueString, () => {\n        console.log(\"Done writing to left!\"); // This refreshes the data in this app once the spreadsheet is written to\n\n        getSpreadsheetData(leftSpreadsheetId, onLeftSpreadsheetLoaded);\n      });\n    } // If the right data is from Google Sheets, write to it\n\n\n    if (rightSpreadsheetId) {\n      // Set refreshing to be true\n      setRightData(rightDataState => {\n        return { ...rightDataState,\n          refreshing: true\n        };\n      });\n      modifySpreadsheetDataSingleCell(rightSpreadsheetId, right.columnIndex, right.rowIndex, rightValueString, () => {\n        console.log(\"Done writing to right!\"); // This refreshes the data in this app once the spreadsheet is written to\n\n        getSpreadsheetData(rightSpreadsheetId, onRightSpreadsheetLoaded);\n      });\n    }\n  }\n\n  function getLeftRightInfo(row) {\n    return {\n      left: {\n        value: selectedLeftRows[0][leftMatchColumn.key] ? JSON.parse(selectedLeftRows[0][leftMatchColumn.key]) : [],\n        rowIndex: parseInt(selectedLeftRows[0].key) + 2,\n        columnIndex: leftMatchColumn.index + 1,\n        name: selectedLeftRows[0][leftNameColumn.key]\n      },\n      right: {\n        value: row[rightMatchColumn.key] ? JSON.parse(row[rightMatchColumn.key]) : [],\n        rowIndex: parseInt(row.key) + 2,\n        columnIndex: rightMatchColumn.index + 1,\n        name: row[rightNameColumn.key]\n      }\n    };\n  }\n\n  function match(row) {\n    //Get info\n    let info = getLeftRightInfo(row);\n    let left = info.left;\n    let right = info.right; //Match logic\n\n    left.value.push([right.rowIndex, right.name]);\n    right.value.push([left.rowIndex, left.name]); //Write to google sheets\n\n    writeToGoogleSheets(left, right);\n  }\n\n  function unmatch(row) {\n    //Get info\n    let info = getLeftRightInfo(row);\n    let left = info.left;\n    let right = info.right; //Get Cross indecies\n\n    let leftInRightIndex = right.value.map(list => list[0]).indexOf(left.rowIndex);\n    let rightInLeftIndex = left.value.map(list => list[0]).indexOf(right.rowIndex); //Unmatch logic\n\n    left.value.splice(rightInLeftIndex, 1);\n    right.value.splice(leftInRightIndex, 1); //Write to google sheets\n\n    writeToGoogleSheets(left, right);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      padding: 5,\n      backgroundColor: '#f7f7f7'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, \"     \"), /*#__PURE__*/React.createElement(Button, {\n    type: 'primary',\n    onClick: () => setSidebarOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, \" Sorts & Filters \"), /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Button, {\n    href: '/covidsitters/pods',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, \" See Pods \"), /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Button, {\n    href: '/covidsitters/settings',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, \" Settings\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingOverlay, {\n    active: rightRefreshing || leftRefreshing,\n    spinner: true,\n    text: \"Syncing...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"90vh\",\n      width: \"100vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SplitPane, {\n    split: \"vertical\",\n    minSize: 400,\n    defaultSize: defaultPaneSize,\n    style: {\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(LeftDataPanel, {\n    matchingEnabled: matchingEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(RightDataPanel, {\n    matchingEnabled: matchingEnabled,\n    match: match,\n    unmatch: unmatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginLeft: 10,\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, \" \", !matchingEnabled && \"Matching is disabled:\", \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }, \" \", !matchingEnabled && \"Ensure you are using Google Sheets and each sheet has a match column and a name column as defined in settings.\", \" \"))));\n}","map":{"version":3,"sources":["/Users/Adam/Documents/physics-site/src/pages/Matcher.js"],"names":["React","RightDataPanel","LeftDataPanel","SplitPane","Button","modifySpreadsheetDataSingleCell","getSpreadsheetData","formatData","useRecoilState","rightDataState","leftDataState","applicationState","LoadingOverlay","Matcher","appState","setAppState","matchColumn","rightMatchColumn","spreadsheetId","rightSpreadsheetId","nameColumn","rightNameColumn","refreshing","rightRefreshing","setRightData","selectedRows","selectedLeftRows","leftMatchColumn","leftSpreadsheetId","leftNameColumn","leftRefreshing","setLeftData","windowWidth","window","innerWidth","defaultPaneSize","Math","round","matchingEnabled","setSidebarOpen","open","sidebarOpen","onLeftSpreadsheetLoaded","response","range","result","values","length","newDataState","console","log","oldLeftData","newState","data","map","row","key","alert","onRightSpreadsheetLoaded","oldRightData","writeToGoogleSheets","left","right","leftValueString","JSON","stringify","value","rightValueString","columnIndex","rowIndex","getLeftRightInfo","parse","parseInt","index","name","match","info","push","unmatch","leftInRightIndex","list","indexOf","rightInLeftIndex","splice","width","padding","backgroundColor","height","overflow","marginLeft","marginBottom","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport RightDataPanel from '../components/data-panel/RightDataPanel';\nimport LeftDataPanel from '../components/data-panel/LeftDataPanel';\nimport SplitPane from 'react-split-pane';\n\nimport { Button } from 'antd';\n\nimport { modifySpreadsheetDataSingleCell, getSpreadsheetData } from '../util/gapi';\nimport { formatData } from '../util/dataFormatter';\n\nimport { useRecoilState } from 'recoil';\nimport { rightDataState, leftDataState, applicationState } from '../store/atoms';\n\nimport LoadingOverlay from 'react-loading-overlay';\n\n\nexport default function Matcher() {\n  const [appState, setAppState] = useRecoilState(applicationState);\n  const [\n    { matchColumn: rightMatchColumn,\n      spreadsheetId: rightSpreadsheetId,\n      nameColumn: rightNameColumn,\n      refreshing: rightRefreshing,\n    }, setRightData] = useRecoilState(rightDataState);\n  const [\n    { selectedRows: selectedLeftRows,\n      matchColumn: leftMatchColumn,\n      spreadsheetId: leftSpreadsheetId,\n      nameColumn: leftNameColumn,\n      refreshing: leftRefreshing,\n    }, setLeftData] = useRecoilState(leftDataState);\n\n  var windowWidth = window.innerWidth;\n  var defaultPaneSize = Math.round(windowWidth / 2);\n\n  //Disable matching variables & function\n  var matchingEnabled = leftSpreadsheetId && rightSpreadsheetId && rightNameColumn && leftNameColumn && rightMatchColumn && leftMatchColumn;\n\n\n  function setSidebarOpen(open) {\n    setAppState({\n      ...appState,\n      sidebarOpen: open\n    });\n  }\n\n  // This basically refreshes the data in memory, see where this is used.\n  function onLeftSpreadsheetLoaded(response) {\n    var range = response.result;\n    if (range.values.length > 0) {\n      var newDataState = formatData(range.values, true);\n      console.log(newDataState)\n      setLeftData(oldLeftData => {\n        let newState = {\n          ...oldLeftData,\n          // Only updating the state and refreshing\n          // NOTE: If you override the old columns, then you get rid of previous settings\n          data: newDataState.data,\n          // Update selected selected rows with new data\n          selectedRows: oldLeftData.selectedRows.map(row =>\n            // Get the updated row from the new state\n            newDataState.data[row.key]\n          ),\n          refreshing: false,\n        }\n        return newState;\n      })\n    } else {\n      alert('No data found.');\n    }\n  }\n\n  // This basically refreshes the data in memory, see where this is used.\n  function onRightSpreadsheetLoaded(response) {\n    var range = response.result;\n    if (range.values.length > 0) {\n      var newDataState = formatData(range.values, true);\n      console.log(newDataState);\n      setRightData(oldRightData => {\n        let newState = {\n          ...oldRightData,\n          // Only updating the state and refreshing\n          // NOTE: If you override the old columns, then you get rid of previous settings\n          data: newDataState.data,\n          // Update selected selected rows with new data\n          selectedRows: oldRightData.selectedRows.map(row =>\n            // Get the updated row from the new state\n            newDataState.data[row.key]\n          ),\n          refreshing: false,\n        }\n        console.log(newState);\n        return newState;\n      })\n    } else {\n      alert('No data found.');\n    }\n  }\n\n\n  // These functions actually match and unmatch\n  function writeToGoogleSheets(left,right){\n     // Stringify both left and right before writing to Google Sheets\n     let leftValueString = JSON.stringify(left.value);\n     let rightValueString = JSON.stringify(right.value);\n \n     // Save an empty list [] as a blank cell\n     if (leftValueString === \"[]\") leftValueString = \"\";\n     if (rightValueString === \"[]\") rightValueString = \"\";\n \n     // If the left data is from Google Sheets, write to it\n     if (leftSpreadsheetId) {\n \n       // Set refreshing to be true\n       setLeftData(leftDataState => {\n         return {\n           ...leftDataState,\n           refreshing: true,\n         }\n       })\n \n       modifySpreadsheetDataSingleCell(leftSpreadsheetId, left.columnIndex, left.rowIndex, leftValueString, () => {\n         console.log(\"Done writing to left!\");\n         // This refreshes the data in this app once the spreadsheet is written to\n         getSpreadsheetData(leftSpreadsheetId, onLeftSpreadsheetLoaded);\n       });\n     }\n \n     // If the right data is from Google Sheets, write to it\n     if (rightSpreadsheetId) {\n       // Set refreshing to be true\n       setRightData(rightDataState => {\n         return {\n           ...rightDataState,\n           refreshing: true,\n         }\n       });\n       modifySpreadsheetDataSingleCell(rightSpreadsheetId, right.columnIndex, right.rowIndex, rightValueString, () => {\n         console.log(\"Done writing to right!\");\n         // This refreshes the data in this app once the spreadsheet is written to\n         getSpreadsheetData(rightSpreadsheetId, onRightSpreadsheetLoaded);\n       });\n     }\n  }\n\n  function getLeftRightInfo(row){\n    return {\n      left: {\n        value: selectedLeftRows[0][leftMatchColumn.key]? JSON.parse(selectedLeftRows[0][leftMatchColumn.key]) : [],\n        rowIndex: parseInt(selectedLeftRows[0].key) + 2,\n        columnIndex: leftMatchColumn.index + 1,\n        name: selectedLeftRows[0][leftNameColumn.key]\n      },\n      right:{\n        value: row[rightMatchColumn.key] ? JSON.parse(row[rightMatchColumn.key]) : [],\n        rowIndex: parseInt(row.key) + 2,\n        columnIndex: rightMatchColumn.index + 1,\n        name: row[rightNameColumn.key]\n      }\n    }\n  }\n\n  function match(row) {\n    //Get info\n    let info = getLeftRightInfo(row);\n    let left = info.left;\n    let right = info.right;\n    //Match logic\n    left.value.push([right.rowIndex, right.name]);\n    right.value.push([left.rowIndex, left.name]);\n    //Write to google sheets\n    writeToGoogleSheets(left,right)\n  }\n\n  function unmatch(row) {\n    //Get info\n    let info = getLeftRightInfo(row);\n    let left = info.left;\n    let right = info.right;\n    //Get Cross indecies\n    let leftInRightIndex = right.value.map(list => list[0]).indexOf(left.rowIndex);\n    let rightInLeftIndex = left.value.map(list => list[0]).indexOf(right.rowIndex);\n    //Unmatch logic\n    left.value.splice(rightInLeftIndex, 1)\n    right.value.splice(leftInRightIndex, 1)\n    //Write to google sheets\n    writeToGoogleSheets(left,right)\n  }\n\n  return (\n    <div>\n      <div>\n        <div style = {{width:\"100%\", padding:5, backgroundColor:'#f7f7f7'}}>\n          <span>\n            <b>     </b>\n            <Button type={'primary'} onClick={() => setSidebarOpen(true)}> Sorts & Filters </Button>\n            <b> </b>\n            <Button href={'/covidsitters/pods'}> See Pods </Button>\n            <b> </b>\n            <Button href={'/covidsitters/settings'}> Settings</Button>\n          </span>\n        </div>\n        <div className=\"Body\">\n          {/* This is the loading screen */}\n          <LoadingOverlay\n            active={rightRefreshing || leftRefreshing}\n            spinner\n            text='Syncing...'\n          >\n            <div style={{ height: \"90vh\", width: \"100vw\" }}>\n              {/* Split plane to allow panel resizing */}\n              <SplitPane split=\"vertical\" minSize={400} defaultSize={defaultPaneSize} style={{ overflow: 'auto' }}>\n                <LeftDataPanel\n                  matchingEnabled = {matchingEnabled}\n                />\n                <RightDataPanel\n                  matchingEnabled = {matchingEnabled}\n                  match = {match}\n                  unmatch = {unmatch}/>\n              </SplitPane>\n            </div>\n          </LoadingOverlay>\n        </div>\n\n        <div style = {{marginLeft:10, marginBottom:10}}>\n          <b style = {{color:'red'}}> {!matchingEnabled && \"Matching is disabled:\"} </b>\n          <p style = {{color:'red'}}> {!matchingEnabled && \"Ensure you are using Google Sheets and each sheet has a match column and a name column as defined in settings.\"} </p>\n        </div>\n\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}