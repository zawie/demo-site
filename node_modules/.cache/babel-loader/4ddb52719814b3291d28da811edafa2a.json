{"ast":null,"code":"import { atom } from 'recoil'; // This file stores all the global state needed for this app.\n// We should be very careful/diligent about what we think should be \n// global vs local state.\n\nexport function getAtomByKey(key) {\n  switch (key) {\n    case \"application\":\n      return applicationState;\n\n    case \"leftData\":\n      return leftDataState;\n\n    case \"rightData\":\n      return rightDataState;\n\n    case \"rules\":\n      return rulesState;\n\n    default:\n      return;\n  }\n} // Generic app global state\n\nexport const applicationState = atom({\n  key: 'application',\n  default: {\n    user: null,\n    sidebarOpen: false\n  },\n  persistence_UNSTABLE: {\n    type: \"persist\"\n  }\n}); // Tells us about the left data set (data, columns, and selectedRows)\n\nexport const leftDataState = atom({\n  key: 'leftData',\n  // unique ID (with respect to other atoms/selectors)\n  default: {\n    data: [],\n    columns: [],\n    selectedRows: [],\n    matchColumn: null,\n    nameColumn: null,\n    emailColumn: null,\n    spreadsheetId: null,\n    refreshing: false\n  },\n  // default value (aka initial value)\n  persistence_UNSTABLE: {\n    type: \"persist\"\n  }\n}); // Tells us about the right data set (data, columns, and selectedRows)\n\nexport const rightDataState = atom({\n  key: 'rightData',\n  default: {\n    data: [],\n    columns: [],\n    selectedRows: [],\n    matchColumn: null,\n    nameColumn: null,\n    emailColumn: null,\n    spreadsheetId: null,\n    refreshing: false\n  },\n  persistence_UNSTABLE: {\n    type: \"persist\"\n  }\n}); // Tells us about the rules currently in use\n\nexport const rulesState = atom({\n  key: 'rules',\n  default: [],\n  persistence_UNSTABLE: {\n    type: \"persist\"\n  }\n});","map":{"version":3,"sources":["/Users/Adam/Documents/physics-site/src/store/atoms.js"],"names":["atom","getAtomByKey","key","applicationState","leftDataState","rightDataState","rulesState","default","user","sidebarOpen","persistence_UNSTABLE","type","data","columns","selectedRows","matchColumn","nameColumn","emailColumn","spreadsheetId","refreshing"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB,C,CAGA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AAC9B,UAAQA,GAAR;AACI,SAAK,aAAL;AACI,aAAOC,gBAAP;;AACJ,SAAK,UAAL;AACI,aAAOC,aAAP;;AACJ,SAAK,WAAL;AACI,aAAOC,cAAP;;AACJ,SAAK,OAAL;AACI,aAAOC,UAAP;;AACJ;AACI;AAVR;AAaH,C,CAGD;;AACA,OAAO,MAAMH,gBAAgB,GAAGH,IAAI,CAAC;AACjCE,EAAAA,GAAG,EAAE,aAD4B;AAEjCK,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAE,IADD;AAELC,IAAAA,WAAW,EAAE;AAFR,GAFwB;AAMjCC,EAAAA,oBAAoB,EAAE;AAClBC,IAAAA,IAAI,EAAE;AADY;AANW,CAAD,CAA7B,C,CAYP;;AACA,OAAO,MAAMP,aAAa,GAAGJ,IAAI,CAAC;AAC9BE,EAAAA,GAAG,EAAE,UADyB;AACb;AACjBK,EAAAA,OAAO,EAAE;AACLK,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,OAAO,EAAE,EAFJ;AAGLC,IAAAA,YAAY,EAAE,EAHT;AAILC,IAAAA,WAAW,EAAE,IAJR;AAKLC,IAAAA,UAAU,EAAE,IALP;AAMLC,IAAAA,WAAW,EAAE,IANR;AAOLC,IAAAA,aAAa,EAAE,IAPV;AAQLC,IAAAA,UAAU,EAAE;AARP,GAFqB;AAW3B;AACHT,EAAAA,oBAAoB,EAAE;AAClBC,IAAAA,IAAI,EAAE;AADY;AAZQ,CAAD,CAA1B,C,CAkBP;;AACA,OAAO,MAAMN,cAAc,GAAGL,IAAI,CAAC;AAC/BE,EAAAA,GAAG,EAAE,WAD0B;AAE/BK,EAAAA,OAAO,EAAE;AACLK,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,OAAO,EAAE,EAFJ;AAGLC,IAAAA,YAAY,EAAE,EAHT;AAILC,IAAAA,WAAW,EAAE,IAJR;AAKLC,IAAAA,UAAU,EAAE,IALP;AAMLC,IAAAA,WAAW,EAAE,IANR;AAOLC,IAAAA,aAAa,EAAE,IAPV;AAQLC,IAAAA,UAAU,EAAE;AARP,GAFsB;AAY/BT,EAAAA,oBAAoB,EAAE;AAClBC,IAAAA,IAAI,EAAE;AADY;AAZS,CAAD,CAA3B,C,CAkBP;;AACA,OAAO,MAAML,UAAU,GAAGN,IAAI,CAAC;AAC3BE,EAAAA,GAAG,EAAE,OADsB;AAE3BK,EAAAA,OAAO,EAAE,EAFkB;AAG3BG,EAAAA,oBAAoB,EAAE;AAClBC,IAAAA,IAAI,EAAE;AADY;AAHK,CAAD,CAAvB","sourcesContent":["import { atom } from 'recoil';\n\n\n// This file stores all the global state needed for this app.\n// We should be very careful/diligent about what we think should be \n// global vs local state.\n\nexport function getAtomByKey(key) {\n    switch (key) {\n        case \"application\":\n            return applicationState;\n        case \"leftData\":\n            return leftDataState;\n        case \"rightData\":\n            return rightDataState;\n        case \"rules\":\n            return rulesState;\n        default:\n            return\n    }\n\n}\n\n\n// Generic app global state\nexport const applicationState = atom({\n    key: 'application',\n    default: {\n        user: null,\n        sidebarOpen: false,\n    },\n    persistence_UNSTABLE: {\n        type: \"persist\"\n    }\n})\n\n\n// Tells us about the left data set (data, columns, and selectedRows)\nexport const leftDataState = atom({\n    key: 'leftData', // unique ID (with respect to other atoms/selectors)\n    default: {\n        data: [],\n        columns: [],\n        selectedRows: [],\n        matchColumn: null,\n        nameColumn: null,\n        emailColumn: null,\n        spreadsheetId: null,\n        refreshing: false,\n    }, // default value (aka initial value)\n    persistence_UNSTABLE: {\n        type: \"persist\"\n    }\n});\n\n\n// Tells us about the right data set (data, columns, and selectedRows)\nexport const rightDataState = atom({\n    key: 'rightData',\n    default: {\n        data: [],\n        columns: [],\n        selectedRows: [],\n        matchColumn: null,\n        nameColumn: null,\n        emailColumn: null,\n        spreadsheetId: null,\n        refreshing: false,\n    },\n    persistence_UNSTABLE: {\n        type: \"persist\"\n    }\n});\n\n\n// Tells us about the rules currently in use\nexport const rulesState = atom({\n    key: 'rules',\n    default: [],\n    persistence_UNSTABLE: {\n        type: \"persist\"\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}