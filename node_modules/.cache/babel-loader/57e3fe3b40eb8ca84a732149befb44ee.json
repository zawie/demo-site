{"ast":null,"code":"var _jsxFileName = \"/Users/Adam/Documents/physics-site/src/pages/Pods.js\";\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { leftDataState, rightDataState } from '../store/atoms';\nimport { Card, Row, Col, Button } from \"antd\"; // SAMPLE PODS DATA STRUCTURE:\n// let pods = [{\n//     key: 1,\n//     left: {\n//         key: 1,\n//         name: \"Jonathan\",\n//         email: \"caimjonathan@gmail.com\",\n//     },\n//     right: [{\n//         key: 3,\n//         name: \"Sarah\",\n//         email: \"sarah@gmail.com\",\n//     }, {\n//         key: 5,\n//         name: \"George\",\n//         email: \"george@gmail.com\",\n//     }]\n// }];\n\nexport default function Pods() {\n  const {\n    data: leftData,\n    matchColumn: leftMatchColumn,\n    nameColumn: leftNameColumn,\n    emailColumn: leftEmailColumn\n  } = useRecoilValue(leftDataState);\n  const {\n    data: rightData,\n    nameColumn: rightNameColumn,\n    emailColumn: rightEmailColumn\n  } = useRecoilValue(rightDataState);\n\n  function generateEmail(hcw, students) {\n    const lineBreak = \"%0D%0A\";\n    let addresses = students.map(student => student.email).join(', ');\n    let subject = \"You have been assigned to a pod!\";\n    let body = \"Congratulations! You have been assigned to a pod.\" + lineBreak + \"You have been matched to \" + hcw.name + \", who you can reach at \" + hcw.email + \".\";\n    let ccAddress = hcw.email; // TODO: change to appropriate address\n\n    var url = \"mailto:\" + addresses + \"?subject=\" + subject + \"&body=\" + body + \"&cc=\" + ccAddress;\n    window.open(url, '_blank');\n  }\n\n  let podsAreEnabled = rightNameColumn && leftNameColumn && leftMatchColumn;\n\n  if (!podsAreEnabled) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: 10,\n        marginBottom: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, \" Pods are disabled: \"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, \" Ensure each sheet has a match column and a name column as defined in settings. \"));\n  } // Pods enabled\n  // Take only rows from the left that have been matched\n\n\n  let leftMatched = leftData.filter(leftRow => {\n    return leftRow[leftMatchColumn.key] && leftRow[leftMatchColumn.key] !== \"[]\";\n  }); // Extract pods from the left and right data\n\n  let pods = leftMatched.map((leftRow, i) => {\n    // Retrieve and parse matches on left\n    let matches = JSON.parse(leftRow[leftMatchColumn.key]); // Map out to actual student data (right data rows)\n\n    let students = matches.map(match => {\n      let rightIndex = match[0];\n      let rightRow = rightData[rightIndex];\n      return {\n        key: rightIndex,\n        name: rightRow[rightNameColumn.key],\n        email: rightRow[rightEmailColumn.key]\n      };\n    }); // Return pod data structure\n\n    return {\n      key: i + 1,\n      left: {\n        key: leftRow.key,\n        name: leftRow[leftNameColumn.key],\n        email: leftRow[leftEmailColumn.key]\n      },\n      right: students\n    };\n  }); // Group into list of lists of pods to fit formatting of grid below\n\n  let groupedPods = [];\n  let groupSize = 4;\n\n  for (let i = 0; i < pods.length; i++) {\n    if (i % groupSize === 0) {\n      groupedPods.push([]);\n    }\n\n    groupedPods[groupedPods.length - 1].push(pods[i]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      padding: 5,\n      backgroundColor: '#f7f7f7'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Button, {\n    type: 'primary',\n    href: '/covidsitters',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \" Back to Matching \"), /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Button, {\n    href: '/covidsitters/settings',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, \"Settings\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, groupedPods.map(groupOfPods => {\n    return /*#__PURE__*/React.createElement(Row, {\n      gutter: [16, 16],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, groupOfPods.map((pod, i) => {\n      let {\n        left: hcw,\n        right: students\n      } = pod;\n      return /*#__PURE__*/React.createElement(Col, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        key: i,\n        title: \"Pod #\" + pod.key,\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 44\n        }\n      }, \"Healthcare Worker:\"), \" \", hcw.name, \" \", hcw.email), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 44\n        }\n      }, \"Volunteers:\")), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 41\n        }\n      }, students.map((student, i) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 60\n          }\n        }, student.name, \" \", student.email);\n      })), /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        onClick: () => generateEmail(hcw, students),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 41\n        }\n      }, \"Generate Email\")));\n    }));\n  })));\n}","map":{"version":3,"sources":["/Users/Adam/Documents/physics-site/src/pages/Pods.js"],"names":["React","useRecoilValue","leftDataState","rightDataState","Card","Row","Col","Button","Pods","data","leftData","matchColumn","leftMatchColumn","nameColumn","leftNameColumn","emailColumn","leftEmailColumn","rightData","rightNameColumn","rightEmailColumn","generateEmail","hcw","students","lineBreak","addresses","map","student","email","join","subject","body","name","ccAddress","url","window","open","podsAreEnabled","marginLeft","marginBottom","color","leftMatched","filter","leftRow","key","pods","i","matches","JSON","parse","match","rightIndex","rightRow","left","right","groupedPods","groupSize","length","push","width","padding","backgroundColor","groupOfPods","pod"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { useRecoilValue } from 'recoil';\nimport { leftDataState, rightDataState } from '../store/atoms';\nimport { Card, Row, Col,Button } from \"antd\";\n\n\n// SAMPLE PODS DATA STRUCTURE:\n// let pods = [{\n//     key: 1,\n//     left: {\n//         key: 1,\n//         name: \"Jonathan\",\n//         email: \"caimjonathan@gmail.com\",\n//     },\n//     right: [{\n//         key: 3,\n//         name: \"Sarah\",\n//         email: \"sarah@gmail.com\",\n//     }, {\n//         key: 5,\n//         name: \"George\",\n//         email: \"george@gmail.com\",\n//     }]\n// }];\n\n\nexport default function Pods() {\n\n    const { data: leftData, matchColumn: leftMatchColumn, nameColumn: leftNameColumn, emailColumn: leftEmailColumn } = useRecoilValue(leftDataState);\n    const { data: rightData, nameColumn: rightNameColumn, emailColumn: rightEmailColumn } = useRecoilValue(rightDataState);\n\n    function generateEmail(hcw, students) {\n        const lineBreak = \"%0D%0A\";\n        let addresses = students.map((student) => student.email).join(', ');\n        let subject = \"You have been assigned to a pod!\";\n        let body = \"Congratulations! You have been assigned to a pod.\" + lineBreak +\n            \"You have been matched to \" + hcw.name + \", who you can reach at \" + hcw.email + \".\";\n        let ccAddress = hcw.email; // TODO: change to appropriate address\n\n        var url = \"mailto:\" + addresses +\n            \"?subject=\" + subject +\n            \"&body=\" + body +\n            \"&cc=\" + ccAddress;\n\n        window.open(url, '_blank');\n    }\n\n\n    let podsAreEnabled = rightNameColumn && leftNameColumn && leftMatchColumn;\n    if (!podsAreEnabled) {\n        return (\n            <div style={{ marginLeft: 10, marginBottom: 10 }}>\n                <b style={{ color: 'red' }}> Pods are disabled: </b>\n                <p style={{ color: 'red' }}> Ensure each sheet has a match column and a name column as defined in settings. </p>\n            </div>\n        );\n    }\n\n    // Pods enabled\n    // Take only rows from the left that have been matched\n    let leftMatched = leftData.filter(leftRow => {\n        return leftRow[leftMatchColumn.key] && leftRow[leftMatchColumn.key] !== \"[]\";\n    });\n\n    // Extract pods from the left and right data\n    let pods = leftMatched.map((leftRow, i) => {\n        // Retrieve and parse matches on left\n        let matches = JSON.parse(leftRow[leftMatchColumn.key]);\n\n        // Map out to actual student data (right data rows)\n        let students = matches.map(match => {\n            let rightIndex = match[0];\n            let rightRow = rightData[rightIndex];\n            return {\n                key: rightIndex,\n                name: rightRow[rightNameColumn.key],\n                email: rightRow[rightEmailColumn.key],\n            }\n        });\n\n        // Return pod data structure\n        return {\n            key: i + 1,\n            left: {\n                key: leftRow.key,\n                name: leftRow[leftNameColumn.key],\n                email: leftRow[leftEmailColumn.key],\n            },\n            right: students\n        }\n    });\n\n    // Group into list of lists of pods to fit formatting of grid below\n    let groupedPods = [];\n    let groupSize = 4;\n    for (let i = 0; i < pods.length; i++) {\n        if (i % groupSize === 0) {\n            groupedPods.push([])\n        }\n        groupedPods[groupedPods.length - 1].push(pods[i]);\n    }\n    return (\n        <div>\n            <div style = {{width:\"100%\", padding:5, backgroundColor:'#f7f7f7'}}>\n                <span>\n                <b> </b>\n                <Button type={'primary'} href={'/covidsitters'}> Back to Matching </Button>\n                <b> </b>\n                <Button href={'/covidsitters/settings'}>Settings</Button>\n                </span>\n            </div>\n            <div className=\"Main\">\n                {groupedPods.map(groupOfPods => {\n                    return (\n                    <Row gutter={[16, 16]}>\n                        {groupOfPods.map((pod, i) => {\n                            let { left: hcw, right: students } = pod;\n                            return (\n                                <Col span={6}>\n                                    <Card key={i} title={\"Pod #\" + pod.key} size=\"small\" >\n                                        <p><b>Healthcare Worker:</b> {hcw.name} {hcw.email}</p>\n                                        <p><b>Volunteers:</b></p>\n                                        <ul>\n                                            {\n                                                students.map((student, i) => {\n                                                    return <li key={i}>{student.name} {student.email}</li>\n                                                })\n                                            }\n                                        </ul>\n                                        <Button block={true} onClick={() => generateEmail(hcw, students)}>Generate Email</Button>\n                                    </Card>\n                                </Col>\n                            )\n                        })}\n                    </Row>)\n                })}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}